<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--通过这个配置文件，完成mybatis与数据库的连接  -->
<configuration>
    <!-- 注意此配置文件内的元素的  -->
    <!-- 引入database.properties文件 -->
    <!--<properties resource="database.properties"/>-->
    <!--配置mybatis的log实现为LOG4J  -->
    <!-- 配置后，后台就会有sql语句的输出 -->
    <settings>
        <setting name="logImpl" value="LOG4J"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <setting name="cacheEnabled" value="true"/>
    </settings>
    <!-- 设置类的别名 -->
    <typeAliases>
        <!-- <typeAlias alias="User" type="com.wu.pojo.User"/> -->
        <!-- 根据包取别名，把包下面的所有类都按类名来取别名 -->
        <!-- 这用可以简化代码量 -->
        <package name="funny.mybatis.demo.model"/>
    </typeAliases>

    <typeHandlers>
        <typeHandler handler="funny.mybatis.demo.type.EnabledTypeHandler"
                     javaType="funny.mybatis.demo.type.Enabled"/>
    </typeHandlers>

    <plugins>
        <plugin interceptor="funny.mybatis.demo.plugin.PageInterceptor">
            <property name="dialect" value="funny.mybatis.demo.plugin.MySqlDialect"/>
        </plugin>
    </plugins>

    <environments default="development">
        <environment id="development">
            <!-- 配置事务管理 ，采用JDBC管理事务-->
            <transactionManager type="JDBC"/>
            <!-- POOLED是mybatis的 数据源 -->
            <!-- JNDI是基于tomcat的数据源 -->
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC"/>
                <property name="username" value="root"/>
                <property name="password" value="root"/>
            </dataSource>
        </environment>
    </environments>



    <!-- pojo的映射文件UserMapper引入到配入到配置文件中 -->
    <mappers>
        <!-- resource要写成路径 -->
        <!--这种配置方式会先查找包下所有的接口，循环对接口进行如下操作
        1.判断接口对应的命名空间是否已经存在。如果存在就抛出异常，不存在就继续进行接下来的操作。
        2.加载接口对应的XML映射文件，将接口全限定名转换为路径。
            例如将接口funny.mybatis.simple.mapper.UserMapper转换为
            funny/mybatis/simple/mapper/UserMapper.xml
            以xml为后缀搜索XML资源，如果找到就解析XML
        3.因为这里的接口和XML映射文件完全符合上面操作的第2点,因此直接配置包名就能自动扫描包下的接口和XML映射文件。
        -->
        <mapper resource="funny/mybatis/demo/mapper/CountryMapper.xml"/>
        <mapper resource="funny/mybatis/demo/mapper/PrivilegeMapper.xml"/>
        <mapper resource="funny/mybatis/demo/mapper/RoleMapper.xml"/>
        <mapper resource="funny/mybatis/demo/mapper/RolePrivilegeMapper.xml"/>
        <mapper resource="funny/mybatis/demo/mapper/UserMapper.xml"/>
        <mapper resource="funny/mybatis/demo/mapper/UserRoleMapper.xml"/>
        <mapper resource="funny/mybatis/demo/mapper/SimpleMapper.xml"/>

        <!--<package name="funny.mybatis.demo.mapper"/>-->
    </mappers>
</configuration>

